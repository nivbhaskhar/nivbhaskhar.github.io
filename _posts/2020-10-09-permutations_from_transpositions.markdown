---
layout: post
title: "Permutations from transpositions"
date: 2020-10-09 08:53:21 -0700
tags: [Algorithms, Group theory]
---

# What is a permutation ?
{: class="sectiontitle"}


Any rearrangement of the list [1,2,3,...,n] is called a *permutation*{: class="emphasis"} of it. For example

- There are 6 permutations of [1,2,3], namely [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]


# What is a transposition ?
{: class="sectiontitle" }


A *transposition (i,j)*{: class="emphasis"} is a simple move which switches the numbers *i* and *j* 

For example,
- The transposition (2,3) applied to [1,2,3] gives the permutation [1,3,2]. 
- The transposition (2,3) applied to [5,3,4,1,2] gives the permutation [5,2,4,1,3]



# Permutations from transpositions ?
{: class="sectiontitle" }


Suppose we start with [1,2,....n] and we are only allowed to use transpositions to switch elements across. Can we end up with *any* permutation of [1,2,...,n] ?




The answer is ... yes! This fact, in group theory is expressed as the following theorem:

> Theorem: The group of permutations is generated by transpositions


As an example, let's see how we can get [3,2,4,1] from [1,2,3,4] by repeatedly using just transpositions


- First use the (1,4) transposition : [__1__{: class="emphasis" },2,3,__4__{: class="emphasis" }]->[__4__{: class="emphasis" },2,3,__1__{: class="emphasis" }]

- Then use the (3,4) transposition : [__4__{: class="emphasis" },2,__3__{: class="emphasis" },1]->[__3__{: class="emphasis" },2,__4__{: class="emphasis" },1]


Note that there might be many ways to use transpositions to get to a permutation. In this post, we are only concerned about showing the *existence* of one such way!


# _To_ is equivalent to _From_
{: class="sectiontitle" }

First, let's note that if we can go from [1,2,..,n] to a permutation _s_ using transpositions $$T_1, T_2, \ldots, T_r$$, then you can use the transpositions in reverse order to go from _s_ to [1,2,...,n]

As an example, observe that we can go from [3,2,4,1] to [1,2,3,4] by repeatedly using just transpositions as follows


- First use the (3,4) transposition : [__3__{: class="emphasis" },2,__4__{: class="emphasis" },1]->[__4__{: class="emphasis" },2,__3__{: class="emphasis" },1]

- Then use the (1,4) transposition : [__4__{: class="emphasis" },2,3,__1__{: class="emphasis" }]->[__1__{: class="emphasis" },2,3,__4__{: class="emphasis" }]

 
So we'll show that we can go from an arbitrary permutation _s_ to [1,2,....,n] using just transpositions



# Bubble sort
{: class="sectiontitle" }

Now there is a classical sorting algorithm called *bubble sort*{: class="emphasis"}. Given a list of _n_ numbers, it sorts it in ascending order.


The way it works is as follows: 

- Look at _0_-th and _1_-st element in list. Swap them if _0_-th element > _1_-st element.
- Look at _1_-st and _2_-nd element in list. Swap them if _1_-st element > _2_-nd element.
- ...
- Look at _n-1_-th and _n_-th element in list. Swap them if  _n-1_-th element > _n_-th element. 

  *At this stage, the largest element of the list has been pushed or rather, bubbled to the end of the list. This process takes n-1 steps*{: class="emphasis" }

- Now repeat the same process for the first n-1 elements of the list. That is, compare (_0_-th and _1_-st element), swap if needed. Compare (_1_-st and _2_-nd element), swap if needed.... Compare (_n-2_-th and _n-1_-th element), swap if needed. 

  *At this stage, the second largest element of the list has been bubbled to the last but one position in the list. This process takes n-2 steps*{: class="emphasis" }


- Keep repeating the same process for the first _n-2_ elements of the list. Then, for the first _n-3_ elements of the list and so on. 

- When you do the process for the first _n-i_ elements of the list, the _i+1_-th largest element of the list gets pushed to its correct position in the sorted order. 


- Thus after _n-1 + n-2 + .... + 2+1_ = $$O(n^2)$$ steps over all, you'll end up with the list sorted in ascending order.


# Proof of the theorem
{: class="sectiontitle" }

Let's apply bubble sort to our permutation _s_. Notice that any step in bubble sort is a swap of exactly two elements if at all, i.e. a transposition move! And we change s to [1,2,...,n] !

Thus using $$O(n^2)$$ transpositions, we can covert _s_ to [1,2,...,n] and vice versa, by reversing the order of transpositions. Voila! We just proved our theorem.


# Bubble sort in action !
{: class="sectiontitle" }


Let's apply our constructive bubble-sort proof to go from [3,2,4,1] to [1,2,3,4] using just transpositions


*For the first 4 elements*{: class="emphasis" }

- Swap _1_-st and _2_-nd element using (2,3) transposition : [__3__{:class="emphasis" },__2__{: class="emphasis" },4,1]->[__2__{:class="emphasis" },__3__{: class="emphasis" },4,1]
- _2_-nd and _3_-rd element in good shape, no need to swap : [2,__3__{: class="emphasis" },__4__{:class="emphasis" },1] stays as it is
- Swap _3_-rd and _4_-th element using (1,4) transposition : [2,3,__4__{: class="emphasis" },__1__{: class="emphasis" }]->[2,3,__1__{: class="emphasis" },__4__{: class="emphasis" }]

*For the first 3 elements*{: class="emphasis" }
- _1_-st and _2_-nd element in good shape, no need to swap : [__2__{:class="emphasis" },__3__{: class="emphasis" },1,4] stays as it is

- Swap _2_-nd and _3_-rd element using (1,3) transposition : [2,__3__{: class="emphasis" },__1__{: class="emphasis" },4]->[2,__1__{: class="emphasis" },__3__{: class="emphasis" },4]

*For the first 2 elements*{: class="emphasis" }
- Swap _1_-st and _2_-nd element using  (1,2) transposition : [__2__{: class="emphasis" },__1__{: class="emphasis" },3,4] -> [__1__{: class="emphasis" },__2__{: class="emphasis" },3,4]

Done!



# Transposition usage
{: class="sectiontitle" }

Note that we ended up using 4 transpositions for the bubble-sort algorithm to go from [3,2,4,1] to [1,2,3,4] while we had used just 2 to achieve it earlier. So this algorithm is not very economical in terms of usage of transpositions. However, it gives a nice constructive proof of how to generate permutations with transpositions!



